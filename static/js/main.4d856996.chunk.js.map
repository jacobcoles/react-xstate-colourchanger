{"version":3,"sources":["dmAppointment.ts","index.tsx"],"names":["say","text","send","_context","type","value","listen","grammar","person","day","time","bool_val","initial_function","dmMachine","initial","states","init","on","CLICK","welcome","id","RECOGNISED","target","actions","assign","context","query","recResult","prompt","entry","ENDSPEECH","ask","invoke","src","event","nluRequest","myQuery","fetch","Request","proxyurl","method","headers","body","then","data","json","onDone","cond","intent","confidence","snippet","name","console","log","onError","select_task","select","always","todo","timer","who","nomatch","whole_day_query","meeting_time_query","confirm_day_and_time","confirm_full_day","finalise","say_error","inspect","url","iframe","machine","Machine","dm","asrtts","idle","LISTEN","SPEAK","ttsAgenda","recognising","exit","ASRRESULT","match","speaking","recLogResult","test","logIntent","nluData","ReactiveButton","props","state","matches","className","style","animation","App","useSpeechSynthesis","onEnd","speak","cancel","useSpeechRecognition","onResult","result","stop","listening","useMachine","devTools","recStart","asEffect","interimResults","continuous","recStop","changeColour","document","background","ttsStart","effect","ttsCancel","current","onClick","rootElement","getElementById","ReactDOM"],"mappings":"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","file":"static/js/main.4d856996.chunk.js","sourcesContent":["import { MachineConfig, send, Action, assign } from \"xstate\";\n\n\nfunction say(text: string): Action<SDSContext, SDSEvent> {\n    return send((_context: SDSContext) => ({ type: \"SPEAK\", value: text }))\n}\n\nfunction listen(): Action<SDSContext, SDSEvent> {\n    return send('LISTEN')\n}\n\nconst grammar: { [index: string]: { person?: string, day?: string, time?: string, bool_val?: boolean, initial_function: string } } = {\n    \"John\": { person: \"John Appleseed\" },\n    \"Sarah\": { person: \"Sarah Swiggity\" },\n    \"daddy\": { person: \"The big lad\" },\n    \"on monday\": { day: \"Friday\" },\n    \"on tuesday\": { day: \"Thursday\" },\n    \"on wednesday\": { day: \"Friday\" },\n    \"on thursday\": { day: \"Thursday\" },\n    \"on friday\": { day: \"Friday\" },\n    \"on saturday\": { day: \"Thursday\" },\n    \"on sunday\": { day: \"Friday\" },\n    \"at 8\": { time: \"8:00\" },\n    \"at 9\": { time: \"9:00\" },\n    \"at 10\": { time: \"10:00\" },\n    \"at 11\": { time: \"11:00\" },\n    \"at 12\": { time: \"12:00\" },\n    \"at 13\": { time: \"13:00\" },\n    \"at 14\": { time: \"14:00\" },\n    \"at 15\": { time: \"15:00\" },\n    \"at 16\": { time: \"16:00\" },\n    \"yes\": { bool_val: true },\n\t\"yeah\": { bool_val: true },\n\t\"ok\": { bool_val: true },\n\t\"sure\": { bool_val: true },\n\t\"ja\": { bool_val: true },\n    \"no\": { bool_val: false },\n\t\"nope\": { bool_val: false },\n\t\"nein\": { bool_val: false },\n\t\"nej\": { bool_val: false },\n\t\"appointment\": { initial_function: \"appt\" },\n\t\"an appointment\": { initial_function: \"appt\" },\n\t\"set up an appointment\": { initial_function: \"appt\" },\n\t\"make an appointment\": { initial_function: \"appt\" },\n\t\"to do\": { initial_function: \"todo\" },\n\t\"set up a to do\": { initial_function: \"todo\" },\n\t\"make to do\": { initial_function: \"todo\" },\n\t\"make a to do\": { initial_function: \"todo\" },\n\t\"timer\": { initial_function: \"timer\" },\n\t\"make a timer\": { initial_function: \"timer\" },\n\t\"set a timer\": { initial_function: \"timer\" },\n\t\"set timer\": { initial_function: \"timer\" },\n}\n\n\nconst proxyurl = \"https://cors-anywhere.herokuapp.com/\";\nconst rasaurl = 'https://rasajacobcoles.herokuapp.com/model/parse'\nconst nluRequest = (myQuery: string) =>\n    fetch(new Request(proxyurl + rasaurl, {\n        method: 'POST',\n        headers: { 'Origin': 'http://localhost:3000/' }, // only required with proxy\n        body: `{\"text\": \"${myQuery}\"}`\n    }))\n        .then(data => data.json());\n\n\nexport const dmMachine: MachineConfig<SDSContext, any, SDSEvent> = ({\n    initial: 'init',\n    states: {\n        init: {\n            on: {\n                CLICK: 'welcome'\n            }\n        },\n\t\twelcome:{\n\t\t\tinitial: \"prompt\",\n\t\t\tid: \"welcome\",\n\t\t\ton: {\n\t\t\t\tRECOGNISED: {\n\t\t\t\t\ttarget: \"query\",\n\t\t\t\t\tactions: assign((context) => { return { query: context.recResult } })\n\t\t\t\t}\n\t\t\t},\n\t\t\tstates: {\n                prompt: { \n\t\t\t\t\tentry: say(\"Would you like to book an appointment, set a timer or add a to do item?\"),\n\t\t\t\t\ton: { ENDSPEECH: \"ask\"} \n\t\t\t\t},\n\t\t\t\task: {\n\t\t\t\t\tentry: listen()\n\t\t\t\t},\n            }\n\t\t},\n\t\tquery: {\n\t\t\tinvoke: {\n\t\t\t\tid: \"rasaquery\",\n\t\t\t\tsrc: (context, event) => nluRequest(context.query),\n\t\t\t\tonDone: [\n\t\t\t\t\t{\n\t\t\t\t\t\ttarget: \".prompt\",\n\t\t\t\t\t\tcond: (context, event)=> { return ((event.data.intent.confidence) < 0.7) }\n\t\t\t\t\t},\n\t\t\t\t\t{\n\t\t\t\t\t\ttarget: \"select_task\",\n\t                    actions: [\n\t\t\t\t\t\t\tassign((context, event) => { return {snippet: event.data.intent.name }}),\n\t\t\t\t\t\t\t(context:SDSContext, event:any) => console.log(event.data),\n\t\t\t\t\t\t]\n\t\t\t\t\t},\n                ],\n\t\t\t\tonError: {\n\t\t\t\t\ttarget: 'init',\n\t\t\t\t\tactions: [\n\t\t\t\t\t\t(context,event) => console.log(event.data),\n\t\t\t\t\t\tsay(\"Sorry, there was an error. \")\n\t\t\t\t\t\t]\n\t\t\t\t}\n\t\t\t},\n\t\t\tstates: {\n                prompt: { \n\t\t\t\t\tentry: say(\"Sorry, I didn't get that\"),\n\t\t\t\t\ton: { ENDSPEECH: \"#welcome\"} \n\t\t\t\t},\n            }\n\t\t},\n\t\tselect_task: {\n\t\t\tinitial: \"select\",\n\t\t\tstates: {\n\t\t\t\tselect: {\n\t\t\t\t\talways: [\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tcond: (context) => context.snippet ===  \"Appointment\",\n\t\t\t\t\t\t\ttarget: \"#who\"\n\t\t\t\t\t\t},\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tcond: (context) => context.snippet  ===  \"TODO\",\n\t\t\t\t\t\t\ttarget: \"#todo\"\n\t\t\t\t\t\t},\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tcond: (context) => context.snippet  ===  \"Timer\",\n\t\t\t\t\t\t\ttarget: \"#timer\"\n\t\t\t\t\t\t},\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\ttarget: \"prompt\"\n\t\t\t\t\t\t}\n\t\t\t\t\t],\n\t\t\t\t},\n\t\t\t\tprompt: { \n\t\t\t\t\tentry: say(\"Sorry, that isn't a valid answer\"),\n\t\t\t\t\ton: { ENDSPEECH: \"#welcome\"} \n\t\t\t\t},\n\t\t\t},\n\t\t},\n\t\ttodo: {\n            id: \"todo\",\n\t\t\tinitial: \"prompt\",\n\t\t\ton: {\n\t\t\t\tENDSPEECH: \"init\"\n\t\t\t},\n\t\t\tstates: {\n\t\t\t\tprompt: {\n\t\t\t\t\tentry: say(\"You are in the to do thing.\"),\n\t\t\t\t},\n\t\t\t}\n\t\t},\n\t\ttimer: {\n            id: \"timer\",\n\t\t\tinitial: \"prompt\",\n\t\t\ton: {\n\t\t\t\tENDSPEECH: \"init\"\n\t\t\t},\n\t\t\tstates: {\n\t\t\t\tprompt: {\n\t\t\t\t\tentry: say(\"You are in the timer thing.\")\n\t\t\t\t},\n\t\t\t}\n\t\t},\n        who: {\n            id: \"who\",\n            initial: \"prompt\",\n            on: {\n                RECOGNISED: [{\n                    cond: (context) => \"person\" in (grammar[context.recResult] || {}),\n                    actions: assign((context) => { return { person: grammar[context.recResult].person }}),\n                    target: \"day\"\n                },\n                { target: \".nomatch\" }]\n            },\n            states: {\n                prompt: {\n                    entry: say(\"Who are you meeting with?\"),\n                    on: { ENDSPEECH: \"ask\" }\n                },\n                ask: {\n                    entry: listen()\n                },\n                nomatch: {\n                    entry: say(\"Sorry I don't know them\"),\n                    on: { ENDSPEECH: \"prompt\" }\n                }\n            }\n        },\n        day: {\n            initial: \"prompt\",\n            on: {\n                RECOGNISED: [{\n                    cond: (context) => \"day\" in (grammar[context.recResult] || {}),\n                    actions: assign((context) => { return { day: grammar[context.recResult].day } }),\n                    target: \"whole_day_query\"\n\n                },\n                { target: \".nomatch\" }]\n            },\n            states: {\n                prompt: {\n                    entry: send((context) => ({\n                        type: \"SPEAK\",\n                        value: `OK. ${context.person}. On which day is your meeting?`\n                    })),\n                    on: { ENDSPEECH: \"ask\" }\n                },\n                ask: {\n                    entry: listen()\n                },\n                nomatch: {\n                    entry: say(\"Can you please repeat that\"),\n                    on: { ENDSPEECH: \"ask\" }\n                }\n            }\n        },\n        whole_day_query: {\n            initial: \"prompt\",\n            on: {\n                RECOGNISED: [\n\t\t\t\t{\n\t\t\t\t\tcond: (context) => \"bool_val\" in (grammar[context.recResult] || {}) && (grammar[context.recResult].bool_val == false),\n                    actions: assign((context) => { return { bool_val: grammar[context.recResult].bool_val } }),\n                    target: \"meeting_time_query\"\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\tcond: (context) => \"bool_val\" in (grammar[context.recResult] || {}) && (grammar[context.recResult].bool_val == true),\n                    actions: assign((context) => { return { bool_val: grammar[context.recResult].bool_val } }),\n                    target: \"confirm_full_day\"\n\t\t\t\t},\n                { target: \".nomatch\" }]\n            },\n            states: {\n                prompt: {\n                    entry: send((context) => ({\n                        type: \"SPEAK\",\n                        value: `Will the meeting take the whole day?`\n                    })),\n                    on: { ENDSPEECH: \"ask\" }\n                },\n                ask: {\n                    entry: listen()\n                },\n                nomatch: {\n                    entry: say(\"Can you please repeat that\"),\n                    on: { ENDSPEECH: \"ask\" }\n                },\n            }\n        },\n        meeting_time_query: {\n            initial: \"prompt\",\n            on: {\n                RECOGNISED: [{\n                    cond: (context) => \"time\" in (grammar[context.recResult] || {}),\n                    actions: assign((context) => { return { time: grammar[context.recResult].time } }),\n                    target: \"confirm_day_and_time\"\n\n                },\n                { target: \".nomatch\" }]\n            },\n            states: {\n                prompt: {\n                    entry: send((context) => ({\n                        type: \"SPEAK\",\n                        value: `What time is the meeting?`\n                    })),\n                    on: { ENDSPEECH: \"ask\" }\n                },\n                ask: {\n                    entry: listen()\n                },\n                nomatch: {\n                    entry: say(\"Can you please repeat that\"),\n                    on: { ENDSPEECH: \"ask\" }\n                },\n            }\n        },\n\t\tconfirm_day_and_time: {\n            initial: \"prompt\",\n            on: {\n                RECOGNISED: [\n\t\t\t\t{\n\t\t\t\t\tcond: (context) => \"bool_val\" in (grammar[context.recResult] || {}) && (grammar[context.recResult].bool_val == false),\n                    actions: assign((context) => { return { bool_val: grammar[context.recResult].bool_val } }),\n                    target: \"init\"\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\tcond: (context) => \"bool_val\" in (grammar[context.recResult] || {}) && (grammar[context.recResult].bool_val == true),\n                    actions: assign((context) => { return { bool_val: grammar[context.recResult].bool_val } }),\n                    target: \"finalise\"\n\t\t\t\t},\n                { target: \".nomatch\" }]\n            },\n            states: {\n                prompt: {\n                    entry: send((context) => ({\n                        type: \"SPEAK\",\n                        value: `Do you want to create an appointment with ${context.person} on ${context.day} at ${context.time}?`\n                    })),\n                    on: { ENDSPEECH: \"ask\" }\n                },\n                ask: {\n                    entry: listen()\n                },\n                nomatch: {\n                    entry: say(\"Can you please repeat that\"),\n                    on: { ENDSPEECH: \"ask\" }\n                },\n            }\n        },\n\t\tconfirm_full_day: {\n            initial: \"prompt\",\n            on: {\n                RECOGNISED: [\n\t\t\t\t{\n\t\t\t\t\tcond: (context) => \"bool_val\" in (grammar[context.recResult] || {}) && (grammar[context.recResult].bool_val == false),\n                    actions: assign((context) => { return { bool_val: grammar[context.recResult].bool_val } }),\n                    target: \"init\"\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\tcond: (context) => \"bool_val\" in (grammar[context.recResult] || {}) && (grammar[context.recResult].bool_val == true),\n                    actions: assign((context) => { return { bool_val: grammar[context.recResult].bool_val } }),\n                    target: \"finalise\"\n\t\t\t\t},\n                { target: \".nomatch\" }]\n            },\n            states: {\n                prompt: {\n                    entry: send((context) => ({\n                        type: \"SPEAK\",\n                        value: `Do you want to create an appointment with ${context.person} on ${context.day} for the whole day?`\n                    })),\n                    on: { ENDSPEECH: \"ask\" }\n                },\n                ask: {\n                    entry: listen()\n                },\n                nomatch: {\n                    entry: say(\"Can you please repeat that\"),\n                    on: { ENDSPEECH: \"ask\" }\n                },\n            }\n        },\n\t\tfinalise: {\n\t\t\tentry: say(\"Your appointment has been created.\"),\n\t\t\ton: { ENDSPEECH: \"init\" }\n\t\t},\n\t\tsay_error: {\n\t\t\ttarget: 'init',\n\t\t\tactions: say(\"Sorry, there was an error. \")\n\t\t}\n\n    }\n})\n\n\n\n\n\n\n\n\n\n","import \"./styles.scss\";\nimport * as React from \"react\";\nimport * as ReactDOM from \"react-dom\";\nimport { Machine, assign, send, State } from \"xstate\";\nimport { useMachine, asEffect } from \"@xstate/react\";\nimport { inspect } from \"@xstate/inspect\";\nimport { dmMachine } from \"./dmAppointment\";\n\n\ninspect({\n    url: \"https://statecharts.io/inspect\",\n    iframe: false\n});\n\nimport { useSpeechSynthesis, useSpeechRecognition } from 'react-speech-kit';\n\n\nconst machine = Machine<SDSContext, any, SDSEvent>({\n    id: 'root',\n    type: 'parallel',\n    states: {\n        dm: {\n            ...dmMachine\n        },\n        asrtts: {\n            initial: 'idle',\n            states: {\n                idle: {\n                    on: {\n                        LISTEN: 'recognising',\n                        SPEAK: {\n                            target: 'speaking',\n                            actions: assign((_context, event) => { return { ttsAgenda: event.value } })\n                        }\n                    }\n                },\n                recognising: {\n                    entry: 'recStart',\n                    exit: 'recStop',\n                    on: {\n                        ASRRESULT: {\n                            actions: ['recLogResult',\n                                assign((_context, event) => { return { recResult: event.value } })],\n                            target: '.match'\n                        },\n                        RECOGNISED: 'idle'\n                    },\n                    states: {\n                        match: {\n                            entry: send('RECOGNISED'),\n                        },\n                    }\n                },\n                speaking: {\n                    entry: 'ttsStart',\n                    on: {\n                        ENDSPEECH: 'idle',\n                    }\n                }\n            }\n        }\n    },\n},\n    {\n        actions: {\n            recLogResult: (context: SDSContext) => {\n                /* context.recResult = event.recResult; */\n                console.log('<< ASR: ' + context.recResult);\n            },\n            test: () => {\n                console.log('test')\n            },\n            logIntent: (context: SDSContext) => {\n                /* context.nluData = event.data */\n                console.log('<< NLU intent: ' + context.nluData.intent.name)\n            }\n        },\n    });\n\n\n\ninterface Props extends React.HTMLAttributes<HTMLElement> {\n    state: State<SDSContext, any, any, any>;\n}\nconst ReactiveButton = (props: Props): JSX.Element => {\n    switch (true) {\n        case props.state.matches({ asrtts: 'recognising' }):\n            return (\n                <button type=\"button\" className=\"glow-on-hover\"\n                    style={{ animation: \"glowing 20s linear\" }} {...props}>\n                    Listening...\n                </button>\n            );\n        case props.state.matches({ asrtts: 'speaking' }):\n            return (\n                <button type=\"button\" className=\"glow-on-hover\"\n                    style={{ animation: \"bordering 1s infinite\" }} {...props}>\n                    Speaking...\n                </button>\n            );\n        default:\n            return (\n                <button type=\"button\" className=\"glow-on-hover\" {...props}>\n                    Click to start\n                </button >\n            );\n    }\n}\n\nfunction App() {\n    const { speak, cancel, speaking } = useSpeechSynthesis({\n        onEnd: () => {\n            send('ENDSPEECH');\n        },\n    });\n    const { listen, listening, stop } = useSpeechRecognition({\n        onResult: (result: any) => {\n            send({ type: \"ASRRESULT\", value: result });\n        },\n    });\n    const [current, send, service] = useMachine(machine, {\n        devTools: true,\n        actions: {\n            recStart: asEffect(() => {\n                console.log('LETS GOOOOOO');\n                listen({\n                    interimResults: false,\n                    continuous: true\n                });\n            }),\n            recStop: asEffect(() => {\n                console.log('Recognition stopped.');\n                stop()\n            }),\n            changeColour: asEffect((context) => {\n                console.log('Repainting...');\n                document.body.style.background = context.recResult;\n            }),\n            ttsStart: asEffect((context, effect) => {\n                console.log('Speaking...');\n                speak({ text: context.ttsAgenda })\n            }),\n            ttsCancel: asEffect((context, effect) => {\n                console.log('TTS STOP...');\n                cancel()\n            })\n            /* speak: asEffect((context) => {\n\t     * console.log('Speaking...');\n             *     speak({text: context.ttsAgenda })\n             * } */\n        }\n    });\n\n\n    return (\n        <div className=\"App\">\n            <ReactiveButton state={current} onClick={() => send('CLICK')} />\n        </div>\n    )\n};\n\n\n\n//RASA\n\nconst proxyurl = \"https://cors-anywhere.herokuapp.com/\";\nconst rasaurl = 'https://rasajacobcoles.herokuapp.com/model/parse'\nconst nluRequest = (text: string) =>\n    fetch(new Request(proxyurl + rasaurl, {\n        method: 'POST',\n        headers: { 'Origin': 'http://maraev.me' }, // only required with proxy\n        body: `{\"text\": \"${text}\"}`\n    }))\n        .then(data => data.json());\n\nconst rootElement = document.getElementById(\"root\");\nReactDOM.render(\n    <App />,\n    rootElement);\n"],"sourceRoot":""}