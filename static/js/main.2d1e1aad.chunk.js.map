{"version":3,"sources":["dmAppointmentUpdated.ts","index.tsx"],"names":["send","actions","cancel","say","text","_context","type","value","grammar","person","day","time","bool_val","initial_function","promptAndAsk","prompt","initial","states","entry","on","ENDSPEECH","ask","delay","id","commands","dmMachine","MAXSPEECH","RECOGNISED","target","cond","context","recResult","main","hist","history","clicky","CLICK","begin","assign","query","includes","INVALID_QUERY","VALID_QUERY","HTTP_TIMEOUT","rasa_query","invoke","src","event","fetch","Request","proxyurl","method","headers","body","then","data","json","onDone","intent","confidence","snippet","name","console","log","onError","http_timeout","Promise","resolve","setTimeout","invalid_query","valid_query","select_task","select","always","todo","timer","who","nomatch","whole_day_query","meeting_time_query","confirm_day_and_time","confirm_full_day","finalise","say_error","maxspeech","maxspeech_count","stop","help","inspect","url","iframe","machine","Machine","dm","asrtts","idle","LISTEN","SPEAK","ttsAgenda","recognising","exit","ASRRESULT","toLowerCase","progress","match","speaking","recLogResult","test","logIntent","nluData","ReactiveButton","props","state","matches","className","style","animation","App","useSpeechSynthesis","onEnd","speak","useSpeechRecognition","onResult","result","listen","listening","useMachine","devTools","recStart","asEffect","interimResults","continuous","recStop","changeColour","document","background","ttsStart","effect","ttsCancel","current","onClick","rootElement","getElementById","ReactDOM"],"mappings":"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","file":"static/js/main.2d1e1aad.chunk.js","sourcesContent":["import { MachineConfig, actions, Action, assign } from \"xstate\";\nconst { send, cancel } = actions;\n\n\n\nfunction say(text: string): Action<SDSContext, SDSEvent> {\n    return send((_context: SDSContext) => ({ type: \"SPEAK\", value: text }))\n}\n\nfunction listen(): Action<SDSContext, SDSEvent> {\n    return send('LISTEN')\n}\n\nconst grammar: { [index: string]: { person?: string, day?: string, time?: string, bool_val?: boolean, initial_function: string } } = {\n    \"john\": { person: \"John Appleseed\" },\n    \"sarah\": { person: \"Sarah Swiggity\" },\n    \"daddy\": { person: \"The big lad\" },\n    \"on monday\": { day: \"Friday\" },\n    \"on tuesday\": { day: \"Thursday\" },\n    \"on wednesday\": { day: \"Friday\" },\n    \"on thursday\": { day: \"Thursday\" },\n    \"on friday\": { day: \"Friday\" },\n    \"on saturday\": { day: \"Thursday\" },\n    \"on sunday\": { day: \"Friday\" },\n    \"at 8\": { time: \"8:00\" },\n    \"at 9\": { time: \"9:00\" },\n    \"at 10\": { time: \"10:00\" },\n    \"at 11\": { time: \"11:00\" },\n    \"at 12\": { time: \"12:00\" },\n    \"at 13\": { time: \"13:00\" },\n    \"at 14\": { time: \"14:00\" },\n    \"at 15\": { time: \"15:00\" },\n    \"at 16\": { time: \"16:00\" },\n    \"8\": { time: \"8:00\" },\n    \"9\": { time: \"9:00\" },\n    \"10\": { time: \"10:00\" },\n    \"11\": { time: \"11:00\" },\n    \"12\": { time: \"12:00\" },\n    \"13\": { time: \"13:00\" },\n    \"14\": { time: \"14:00\" },\n    \"15\": { time: \"15:00\" },\n    \"16\": { time: \"16:00\" },\n    \"yes\": { bool_val: true },\n\t\"yeah\": { bool_val: true },\n\t\"ok\": { bool_val: true },\n\t\"sure\": { bool_val: true },\n\t\"ja\": { bool_val: true },\n    \"no\": { bool_val: false },\n\t\"nope\": { bool_val: false },\n\t\"nein\": { bool_val: false },\n\t\"nej\": { bool_val: false },\n\t\"appointment\": { initial_function: \"appt\" },\n\t\"an appointment\": { initial_function: \"appt\" },\n\t\"set up an appointment\": { initial_function: \"appt\" },\n\t\"make an appointment\": { initial_function: \"appt\" },\n\t\"to do\": { initial_function: \"todo\" },\n\t\"set up a to do\": { initial_function: \"todo\" },\n\t\"make to do\": { initial_function: \"todo\" },\n\t\"make a to do\": { initial_function: \"todo\" },\n\t\"timer\": { initial_function: \"timer\" },\n\t\"make a timer\": { initial_function: \"timer\" },\n\t\"set a timer\": { initial_function: \"timer\" },\n\t\"set timer\": { initial_function: \"timer\" },\n}\n\nfunction promptAndAsk(prompt: string): MachineConfig<SDSContext, any, SDSEvent> {\n\t\n    return ({\n        initial: 'prompt',\n        states: {\n            prompt: {\n                entry: say(prompt),\n                on: { ENDSPEECH: 'ask' }\n            },\n            ask: {\n                entry: [\n\t\t\t\t\tsend('LISTEN'),\n\t\t\t\t\tsend( 'MAXSPEECH', { delay: 4000, id: 'maxspeech_cancel' } )\n\t\t\t\t]\n            },\n        }\n    })\n}\n\nconst proxyurl = \"https://cors-anywhere.herokuapp.com/\" // can try instead \"https://boiling-depths-26621.herokuapp.com/\"\nconst rasaurl = 'https://rasajacobcoles.herokuapp.com/model/parse'\nfunction nluRequest(): MachineConfig<SDSContext, any, SDSEvent> {\n    return ({\n\t\tinitial: 'http_timeout',\n\t\tinvoke: {\n\t\t\tid: \"rasaquery\",\n\t\t\tsrc: (context, event) => {\n\t\t\t\t\n\t\t\t\treturn fetch(new Request(proxyurl + rasaurl, {\n\t\t        method: 'POST',\n\t\t        headers: { 'Origin': 'http://localhost:3000/' }, // only required with proxy\n\t\t        body: `{\"text\": \"${context.query}\"}`\n\t\t\t\t}))\n\t\t        .then(data => data.json());\n\n\t\t\t},\n\t\t\tonDone: [\n\t\t\t\t{\n\t\t\t\t\ttarget: '.invalid_query',\n\t\t\t\t\tcond: (context, event)=> { return ((event.data.intent.confidence) < 0.7) }\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\ttarget: '.valid_query',\n                    actions: [\n\t\t\t\t\t\tassign((context, event) => { return {snippet: event.data.intent.name }}),\n\t\t\t\t\t\t(context:SDSContext, event:any) => console.log(event.data),\n\t\t\t\t\t]\n\t\t\t\t},\n\t\t\t],\n\t\t\tonError: {\n\t\t\t\t\ttarget: '#root.dm',\n\t\t\t\t\tactions: say(\"Sorry, there was an error. \")\n\t\t\t\t},\n\t\t},\n\t\tstates: {\n\t\t\thttp_timeout: {\n\t\t\t\tinvoke: {\n\t\t\t\t\tsrc: (context, event) => {\n\t\t\t\t\t\treturn new Promise((resolve) => {\n\t\t\t\t\t\t\t\tsetTimeout(() => { resolve() }, 3000) \n\t\t\t\t\t\t\t})\n\t\t\t\t\t},\n\t\t\t\t},\n\t\t\t\tonDone: send('HTTP_TIMEOUT')\n\t\t\t},\n\t\t\tinvalid_query: {\n\t\t\t\tentry: send('INVALID_QUERY'),\n\t\t\t},\n\t\t\tvalid_query: {\n\t\t\t\tentry: send('VALID_QUERY'),\n\t\t\t},\n\t\t},\n\t})\n}\n\nconst commands = ['stop', 'help']\n\nexport const dmMachine: MachineConfig<SDSContext, any, SDSEvent> = ({\n    initial: 'main',\n    id: 'init',\n    on: {\n\t\tMAXSPEECH: '.maxspeech',\n\t\tRECOGNISED: \n\t\t\t[\n\t\t\t\t{\n\t\t\t\t\ttarget: \".stop\",\n\t\t\t\t\tcond: (context) => context.recResult === 'stop' ,\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\ttarget: \".help\",\n\t\t\t\t\tcond: (context) => context.recResult === 'help' ,\n\t\t\t\t}\n\t\t\t],\n\t},\n    states: {\n        main: {\n\t\t\tinitial: 'clicky',\n\t\t\tstates: {\n\t\t\t\thist: { \n\t\t\t\t\ttype: 'history',\n\t\t\t\t\thistory: 'shallow',\n\t\t\t\t },\n\t\t\t\tclicky: {\n\t\t\t\t\ton: {\n\t\t\t\t\t\tCLICK: 'begin'\n\t\t\t\t\t},\n\t\t\t\t},\n\t\t\t\tbegin:{\n\t\t\t\t\tinitial: \"prompt\",\n\t\t\t\t\tid: \"welcome\",\n\t\t\t\t\ton: {\n\t\t\t\t\t\tRECOGNISED: {\n\t\t\t\t\t\t\ttarget: \"query\",\n\t\t\t\t\t\t\tactions: assign((context) => { return { query: context.recResult } }),\n\t\t\t\t\t\t\tcond: (context) => !commands.includes(context.recResult)\n\t\t\t\t\t\t}\n\t\t\t\t\t},\n\t\t\t\t\tstates: {\n\t\t\t\t\t\tprompt: {\n\t\t\t\t\t\t\t...promptAndAsk(\"Would you like to book an appointment, set a timer or add a to do item?\")\n\t\t\t\t\t\t}\n\t\t            }\n\t\t\t\t},\n\t\t\t\tquery: {\n\t\t\t\t\tinitial:'rasa_query',\n\t\t\t\t\ton: {\n\t\t\t\t\t\tRECOGNISED: {\n\t\t\t\t\t\t\tcond: (context)=> !commands.includes(context.recResult),\n\t\t\t\t\t\t\ttarget: '.rasa_query',\n\t\t\t\t\t\t\tactions: assign((context) => { return { query: context.recResult } })\n\t\t\t\t\t\t},\n\t\t\t\t\t\tINVALID_QUERY: {\n\t\t\t\t\t\t\ttarget: '.invalid_query'\n\t\t\t\t\t\t},\n\t\t\t\t\t\tVALID_QUERY: {\n\t\t\t\t\t\t\ttarget: 'select_task'\n\t\t\t\t\t\t},\n\t\t\t\t\t\tHTTP_TIMEOUT: {\n\t\t\t\t\t\t\ttarget: '.http_timeout'\n\t\t\t\t\t\t},\n\t\t\t\t\t},\n\t\t\t\t\tstates: {\n\t\t\t\t\t\trasa_query: {\n\t\t\t\t\t\t\t...nluRequest()\n\t\t\t\t\t\t},\n\t\t\t\t\t\tinvalid_query: {\n\t\t\t\t\t\t\t...promptAndAsk(\"Sorry, I don't understand, please say that again\"),\n\t\t\t\t\t\t},\n\t\t\t\t\t\thttp_timeout: {\n\t\t\t\t\t\t\t...promptAndAsk(\"Sorry, the rasa server isnt responding right now. Try again.\"),\n\t\t\t\t\t\t},\n\t\t\t\t\t},\n\t\t\t\t},\n\t\t\t\tselect_task: {\n\t\t\t\t\tinitial: \"select\",\n\t\t\t\t\tstates: {\n\t\t\t\t\t\tselect: {\n\t\t\t\t\t\t\talways: [\n\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\tcond: (context) => context.snippet ===  \"Appointment\",\n\t\t\t\t\t\t\t\t\ttarget: \"#who\"\n\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\tcond: (context) => context.snippet  ===  \"TODO\",\n\t\t\t\t\t\t\t\t\ttarget: \"#todo\"\n\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\tcond: (context) => context.snippet  ===  \"Timer\",\n\t\t\t\t\t\t\t\t\ttarget: \"#timer\"\n\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\tcond: (context) => !commands.includes(context.recResult),\n\t\t\t\t\t\t\t\t\ttarget: \"prompt\"\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t],\n\t\t\t\t\t\t},\n\t\t\t\t\t\tprompt: { \n\t\t\t\t\t\t\tentry: say(\"Sorry, that isn't a valid answer\"),\n\t\t\t\t\t\t\ton: { ENDSPEECH: \"#welcome\"} \n\t\t\t\t\t\t},\n\t\t\t\t\t},\n\t\t\t\t},\n\t\t\t\ttodo: {\n\t\t            id: \"todo\",\n\t\t\t\t\tinitial: \"prompt\",\n\t\t\t\t\ton: {\n\t\t\t\t\t\tENDSPEECH: \"#init\"\n\t\t\t\t\t},\n\t\t\t\t\tstates: {\n\t\t\t\t\t\tprompt: {\n\t\t\t\t\t\t\tentry: say(\"You are in the to do thing.\"),\n\t\t\t\t\t\t},\n\t\t\t\t\t}\n\t\t\t\t},\n\t\t\t\ttimer: {\n\t\t            id: \"timer\",\n\t\t\t\t\tinitial: \"prompt\",\n\t\t\t\t\ton: {\n\t\t\t\t\t\tENDSPEECH: \"#init\"\n\t\t\t\t\t},\n\t\t\t\t\tstates: {\n\t\t\t\t\t\tprompt: {\n\t\t\t\t\t\t\tentry: say(\"You are in the timer thing.\")\n\t\t\t\t\t\t},\n\t\t\t\t\t}\n\t\t\t\t},\n\t\t        who: {\n\t\t            id: \"who\",\n\t\t            initial: \"prompt\",\n\t\t            on: {\n\t\t                RECOGNISED: [{\n\t\t                    cond: (context) => \"person\" in (grammar[context.recResult] || {}),\n\t\t                    actions: assign((context) => { return { person: grammar[context.recResult].person }}),\n\t\t                    target: \"day\"\n\t\t                },\n\t\t                { \n\t\t\t\t\t\t\ttarget: \".nomatch\" ,\n\t\t\t\t\t\t\tcond: (context) => !commands.includes(context.recResult)\n\t\t\t\t\t\t}]\n\t\t            },\n\t\t            states: {\n\t\t                prompt: {\n\t\t                    ...promptAndAsk(\"Who are you meeting with?\")\n\t\t                },\n\t\t                nomatch: {\n\t\t                    entry: say(\"Sorry I don't know them\"),\n\t\t                    on: { ENDSPEECH: \"prompt\" }\n\t\t                }\n\t\t            }\n\t\t        },\n\t\t        day: {\n\t\t            initial: \"prompt\",\n\t\t            on: {\n\t\t                RECOGNISED: [{\n\t\t                    cond: (context) => \"day\" in (grammar[context.recResult] || {}),\n\t\t                    actions: assign((context) => { return { day: grammar[context.recResult].day } }),\n\t\t                    target: \"whole_day_query\"\n\t\t\n\t\t                },\n\t\t                { \n\t\t\t\t\t\t\ttarget: \".nomatch\",\n\t\t\t\t\t\t\tcond: (context) => !commands.includes(context.recResult)\n\t\t\t\t\t\t}]\n\t\t            },\n\t\t            states: {\n\t\t                prompt: {\n\t\t                    entry: send((context) => ({\n\t\t                        type: \"SPEAK\",\n\t\t                        value: `OK. ${context.person}. On which day is your meeting?`\n\t\t                    })),\n\t\t                    on: { ENDSPEECH: \"ask\" }\n\t\t                },\n\t\t                ask: {\n\t\t\t                entry: [\n\t\t\t\t\t\t\t\tsend('LISTEN'),\n\t\t\t\t\t\t\t\tsend( 'MAXSPEECH', { delay: 5000, id: 'maxspeech_cancel' } )\n\t\t\t\t\t\t\t]\n\t\t\t            },\n\t\t                nomatch: {\n\t\t                    entry: say(\"Can you please repeat that\"),\n\t\t                    on: { ENDSPEECH: \"ask\" }\n\t\t                }\n\t\t            }\n\t\t        },\n\t\t        whole_day_query: {\n\t\t            initial: \"prompt\",\n\t\t            on: {\n\t\t                RECOGNISED: [\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tcond: (context) => \"bool_val\" in (grammar[context.recResult] || {}) && (grammar[context.recResult].bool_val == false),\n\t\t                    actions: assign((context) => { return { bool_val: grammar[context.recResult].bool_val } }),\n\t\t                    target: \"meeting_time_query\"\n\t\t\t\t\t\t},\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tcond: (context) => \"bool_val\" in (grammar[context.recResult] || {}) && (grammar[context.recResult].bool_val == true),\n\t\t                    actions: assign((context) => { return { bool_val: grammar[context.recResult].bool_val } }),\n\t\t                    target: \"confirm_full_day\"\n\t\t\t\t\t\t},\n\t\t                { \n\t\t\t\t\t\t\ttarget: \".nomatch\" ,\n\t\t\t\t\t\t\tcond: (context) => !commands.includes(context.recResult)\n\t\t\t\t\t\t\t\n\t\t\t\t\t\t}]\n\t\t            },\n\t\t            states: {\n\t\t                prompt: {\n\t\t                    entry: send((context) => ({\n\t\t                        type: \"SPEAK\",\n\t\t                        value: `Will the meeting take the whole day?`\n\t\t                    })),\n\t\t                    on: { ENDSPEECH: \"ask\" }\n\t\t                },\n\t\t                ask: {\n\t\t\t                entry: [\n\t\t\t\t\t\t\t\tsend('LISTEN'),\n\t\t\t\t\t\t\t\tsend( 'MAXSPEECH', { delay: 5000, id: 'maxspeech_cancel' } )\n\t\t\t\t\t\t\t]\n\t\t\t            },\n\t\t                nomatch: {\n\t\t                    entry: say(\"Can you please repeat that\"),\n\t\t                    on: { ENDSPEECH: \"ask\" }\n\t\t                },\n\t\t            }\n\t\t        },\n\t\t        meeting_time_query: {\n\t\t            initial: \"prompt\",\n\t\t            on: {\n\t\t                RECOGNISED: [{\n\t\t                    cond: (context) => \"time\" in (grammar[context.recResult] || {}),\n\t\t                    actions: assign((context) => { return { time: grammar[context.recResult].time } }),\n\t\t                    target: \"confirm_day_and_time\"\n\t\t\n\t\t                },\n\t\t                { \n\t\t\t\t\t\t\ttarget: \".nomatch\" ,\n\t\t\t\t\t\t\tcond: (context) => !commands.includes(context.recResult)\n\t\t\t\t\t\t}]\n\t\t            },\n\t\t            states: {\n\t\t                prompt: {\n\t\t                    entry: send((context) => ({\n\t\t                        type: \"SPEAK\",\n\t\t                        value: `What time is the meeting?`\n\t\t                    })),\n\t\t                    on: { ENDSPEECH: \"ask\" }\n\t\t                },\n\t\t                ask: {\n\t\t\t                entry: [\n\t\t\t\t\t\t\t\tsend('LISTEN'),\n\t\t\t\t\t\t\t\tsend( 'MAXSPEECH', { delay: 5000, id: 'maxspeech_cancel' } )\n\t\t\t\t\t\t\t]\n\t\t\t            },\n\t\t                nomatch: {\n\t\t                    entry: say(\"Can you please repeat that\"),\n\t\t                    on: { ENDSPEECH: \"ask\" }\n\t\t                },\n\t\t            }\n\t\t        },\n\t\t\t\tconfirm_day_and_time: {\n\t\t            initial: \"prompt\",\n\t\t            on: {\n\t\t                RECOGNISED: [\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tcond: (context) => \"bool_val\" in (grammar[context.recResult] || {}) && (grammar[context.recResult].bool_val == false),\n\t\t                    actions: assign((context) => { return { bool_val: grammar[context.recResult].bool_val } }),\n\t\t                    target: \"#init\"\n\t\t\t\t\t\t},\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tcond: (context) => \"bool_val\" in (grammar[context.recResult] || {}) && (grammar[context.recResult].bool_val == true),\n\t\t                    actions: assign((context) => { return { bool_val: grammar[context.recResult].bool_val } }),\n\t\t                    target: \"finalise\"\n\t\t\t\t\t\t},\n\t\t                { \n\t\t\t\t\t\t\ttarget: \".nomatch\" ,\n\t\t\t\t\t\t\tcond: (context) => !commands.includes(context.recResult)\n\t\t\t\t\t\t}]\n\t\t            },\n\t\t            states: {\n\t\t                prompt: {\n\t\t                    entry: send((context) => ({\n\t\t                        type: \"SPEAK\",\n\t\t                        value: `Do you want to create an appointment with ${context.person} on ${context.day} at ${context.time}?`\n\t\t                    })),\n\t\t                    on: { ENDSPEECH: \"ask\" }\n\t\t                },\n\t\t                ask: {\n\t\t\t                entry: [\n\t\t\t\t\t\t\t\tsend('LISTEN'),\n\t\t\t\t\t\t\t\tsend( 'MAXSPEECH', { delay: 5000, id: 'maxspeech_cancel' } )\n\t\t\t\t\t\t\t]\n\t\t\t            },\n\t\t                nomatch: {\n\t\t                    entry: say(\"Can you please repeat that\"),\n\t\t                    on: { ENDSPEECH: \"ask\" }\n\t\t                },\n\t\t            }\n\t\t        },\n\t\t\t\tconfirm_full_day: {\n\t\t            initial: \"prompt\",\n\t\t            on: {\n\t\t                RECOGNISED: [\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tcond: (context) => \"bool_val\" in (grammar[context.recResult] || {}) && (grammar[context.recResult].bool_val == false),\n\t\t                    actions: assign((context) => { return { bool_val: grammar[context.recResult].bool_val } }),\n\t\t                    target: \"#init\"\n\t\t\t\t\t\t},\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tcond: (context) => \"bool_val\" in (grammar[context.recResult] || {}) && (grammar[context.recResult].bool_val == true),\n\t\t                    actions: assign((context) => { return { bool_val: grammar[context.recResult].bool_val } }),\n\t\t                    target: \"finalise\"\n\t\t\t\t\t\t},\n\t\t                { \n\t\t\t\t\t\t\ttarget: \".nomatch\" ,\n\t\t\t\t\t\t\tcond: (context) => !commands.includes(context.recResult)\n\t\t\t\t\t\t}]\n\t\t            },\n\t\t            states: {\n\t\t                prompt: {\n\t\t                    entry: send((context) => ({\n\t\t                        type: \"SPEAK\",\n\t\t                        value: `Do you want to create an appointment with ${context.person} on ${context.day} for the whole day?`\n\t\t                    })),\n\t\t                    on: { ENDSPEECH: \"ask\" }\n\t\t                },\n\t\t                ask: {\n\t\t\t                entry: [\n\t\t\t\t\t\t\t\tsend('LISTEN'),\n\t\t\t\t\t\t\t\tsend( 'MAXSPEECH', { delay: 5000, id: 'maxspeech_cancel' } )\n\t\t\t\t\t\t\t]\n\t\t\t            },\n\t\t                nomatch: {\n\t\t                    entry: say(\"Can you please repeat that\"),\n\t\t                    on: { ENDSPEECH: \"ask\" }\n\t\t                },\n\t\t            }\n\t\t        },\n\t\t\t\tfinalise: {\n\t\t\t\t\tentry: say(\"Your appointment has been created.\"),\n\t\t\t\t\ton: { ENDSPEECH: \"#init.main\" }\n\t\t\t\t},\n\t\t\t\tsay_error: {\n\t\t\t\t\ttarget: 'main',\n\t\t\t\t\tactions: say(\"Sorry, there was an error. \")\n\t\t\t\t},\n\t\t    },\n\t\t},\n\t\tmaxspeech: {\n\t\t\tentry: say(\"Sorry,\"),\n\t\t\ton: {\n\t\t\t\tENDSPEECH: [\n\t\t\t\t\t{\n\t\t\t\t\t\tcond: (context)=> context.maxspeech_count < 3,\n\t\t\t\t\t\ttarget: 'main.hist'\n\t\t\t\t\t},\n\t\t\t\t\t{\n\t\t\t\t\t\tactions: assign((context) => { return { maxspeech_count: 0 } }),\n\t\t\t\t\t\ttarget: '#init'\n\t\t\t\t\t}\n\t\t\t\t]\n\t\t\t}\n\t\t},\n\t\tstop: {\n\t\t\tentry: say(\"Ok, program stopped\"),\n\t\t\ttarget: 'main'\n\t\t},\n\t\thelp: {\n\t\t\tentry: say(\"I'm supposed to help you but I won't\"),\n\t\t\ttarget: 'main'\n\t\t},\n\t},\n\t\t\n})\n\n\n\n\n\n\n\n\n\n","import \"./styles.scss\";\nimport * as React from \"react\";\nimport * as ReactDOM from \"react-dom\";\nimport { Machine, assign, actions, State } from \"xstate\";\nconst { send, cancel } = actions;\nimport { useMachine, asEffect } from \"@xstate/react\";\nimport { inspect } from \"@xstate/inspect\";\nimport { dmMachine } from \"./dmAppointmentUpdated\";\n\n\ninspect({\n    url: \"https://statecharts.io/inspect\",\n    iframe: false\n});\n\nimport { useSpeechSynthesis, useSpeechRecognition } from 'react-speech-kit';\n\n\nconst machine = Machine<SDSContext, any, SDSEvent>({\n    id: 'root',\n    type: 'parallel',\n    states: {\n        dm: {\n            ...dmMachine\n        },\n        asrtts: {\n            initial: 'idle',\n            states: {\n                idle: {\n                    on: {\n                        LISTEN: 'recognising',\n                        SPEAK: {\n                            target: 'speaking',\n                            actions: assign((_context, event) => { return { ttsAgenda: event.value } })\n                        }\n                    }\n                },\n                recognising: {\n                    initial: 'progress',\n                    entry: 'recStart',\n                    exit: 'recStop',\n                    on: {\n                        ASRRESULT: {\n                            actions: ['recLogResult',\n                                assign((_context, event) => { return { recResult: event.value.toLowerCase() } })],\n                            target: '.match'\n                        },\n                        RECOGNISED: {\n\t\t\t\t\t\t\tactions: [\n\t\t\t\t\t\t\t\tcancel('maxspeech_cancel'),\n\t\t\t\t\t\t\t\tassign((_context, event) => { return { maxspeech_count: 0 } })\n\t\t\t\t\t\t\t],\n\t\t\t\t\t\t\ttarget: 'idle'\n\t\t\t\t\t\t},\n                        MAXSPEECH: [\n\t                        {\n\t\t\t\t\t\t\t\tcond: context=> context.maxspeech_count < 3,\n\t\t\t\t\t\t\t\ttarget:'idle',\n\t\t\t\t\t\t\t\tactions: assign((_context, event) => { return { maxspeech_count: _context.maxspeech_count +1 } }),\n\t                        },\n\t                        {\n\t\t\t\t\t\t\t\ttarget:'idle'\n\t                        },\n\t                    ]\n                    },\n                    states: {\n                        progress: {\n                        },\n                        match: {\n                            entry: send('RECOGNISED'),\n                        },\n                    }\n                },\n                speaking: {\n                    entry: 'ttsStart',\n                    on: {\n                        ENDSPEECH: 'idle',\n                    }\n                }\n            }\n        }\n    },\n},\n    {\n        actions: {\n            recLogResult: (context: SDSContext) => {\n                /* context.recResult = event.recResult; */\n                console.log('<< ASR: ' + context.recResult);\n            },\n            test: () => {\n                console.log('test')\n            },\n            logIntent: (context: SDSContext) => {\n                /* context.nluData = event.data */\n                console.log('<< NLU intent: ' + context.nluData.intent.name)\n            }\n        },\n    });\n\n\n\ninterface Props extends React.HTMLAttributes<HTMLElement> {\n    state: State<SDSContext, any, any, any>;\n}\nconst ReactiveButton = (props: Props): JSX.Element => {\n    switch (true) {\n        case props.state.matches({ asrtts: 'recognising' }):\n            return (\n                <button type=\"button\" className=\"glow-on-hover\"\n                    style={{ animation: \"glowing 20s linear\" }} {...props}>\n                    Listening...\n                </button>\n            );\n        case props.state.matches({ asrtts: 'speaking' }):\n            return (\n                <button type=\"button\" className=\"glow-on-hover\"\n                    style={{ animation: \"bordering 1s infinite\" }} {...props}>\n                    Speaking...\n                </button>\n            );\n        default:\n            return (\n                <button type=\"button\" className=\"glow-on-hover\" {...props}>\n                    Click to start\n                </button >\n            );\n    }\n}\n\nfunction App() {\n    const { speak, cancel, speaking } = useSpeechSynthesis({\n        onEnd: () => {\n            send('ENDSPEECH');\n        },\n    });\n    const { listen, listening, stop } = useSpeechRecognition({\n        onResult: (result: any) => {\n            send({ type: \"ASRRESULT\", value: result });\n        },\n    });\n    const [current, send, service] = useMachine(machine, {\n        devTools: true,\n        actions: {\n            recStart: asEffect(() => {\n                console.log('LETS GOOOOOO');\n                listen({\n                    interimResults: false,\n                    continuous: true\n                });\n            }),\n            recStop: asEffect(() => {\n                console.log('Recognition stopped.');\n                stop()\n            }),\n            changeColour: asEffect((context) => {\n                console.log('Repainting...');\n                document.body.style.background = context.recResult;\n            }),\n            ttsStart: asEffect((context, effect) => {\n                console.log('Speaking...');\n                speak({ text: context.ttsAgenda })\n            }),\n            ttsCancel: asEffect((context, effect) => {\n                console.log('TTS STOP...');\n                cancel()\n            })\n            /* speak: asEffect((context) => {\n\t     * console.log('Speaking...');\n             *     speak({text: context.ttsAgenda })\n             * } */\n        }\n    });\n\n\n    return (\n        <div className=\"App\">\n            <ReactiveButton state={current} onClick={() => send('CLICK')} />\n        </div>\n    )\n};\n\n\n\n//RASA\n\nconst proxyurl = \"https://cors-anywhere.herokuapp.com/\";\nconst rasaurl = 'https://rasajacobcoles.herokuapp.com/model/parse'\nconst nluRequest = (text: string) =>\n    fetch(new Request(proxyurl + rasaurl, {\n        method: 'POST',\n        headers: { 'Origin': 'http://maraev.me' }, // only required with proxy\n        body: `{\"text\": \"${text}\"}`\n    }))\n        .then(data => data.json());\n\nconst rootElement = document.getElementById(\"root\");\nReactDOM.render(\n    <App />,\n    rootElement);\n"],"sourceRoot":""}